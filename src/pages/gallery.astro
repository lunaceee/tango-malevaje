---
import Layout from "../layouts/Layout.astro";
import { loadQuery } from "../../sanity/lib/load-query";
import { galleryPageQuery } from "../../sanity/lib/queries";

export interface ImageGalleryProps {
  title: string;
  slug: {
    current: string; // Slug value
  };
  description: string;
  images: {
    altText: string;
    image: string; // Image URL (fetched from Sanity)
  }[];
}

const { data } = await loadQuery<ImageGalleryProps>({
  query: galleryPageQuery,
});
---

<Layout>
  <section class="bg-[url(../assets/background-main.svg)] bg-fuchsia-900">
    {
      data.images ? (
        <div class="container mx-auto p-10 lg:px-40 lg:pb-40">
          <div class="bg-zinc-100/50 p-4 m-4 lg:m-8 lg:p-8 rounded-xl shadow-2xl">
            <h1 class="p-2 m-4">Gallery</h1>
            <p class="mb-4 lg:mb-8 text-center">
              {data.description && data.description}
            </p>
          </div>
          <ul class="grid grid-cols-2 md:grid-cols-3 gap-4">
            {data.images.map((item, index) => {
              return (
                <li key={index}>
                  <img
                    src={item.image}
                    alt={item.altText || "Gallery Image"}
                    class="w-full h-auto rounded-lg shadow-md cursor-pointer gallery-images"
                  />
                </li>
              );
            })}
          </ul>
        </div>
      ) : (
        <h1 class="h-screen">Coming Soon</h1>
      )
    }
    <div
      class="image-modal-popup fixed overflow-auto top-0 bottom-0 right-0 left-0 text-white hidden"
    >
      <div
        class="flex flex-col items-center justify-center max-w-fit mx-auto px-10 mt-40 lg:my-20 relative"
      >
        <img
          src=""
          alt="Image Modal"
          class="w-128 max-h-[calc(100vh-150px)] lg:w-full cursor-pointer"
        />
        <div class="description">
          <a href="#" target="_blank" rel="noopener noreferrer"> </a>
        </div>
      </div>
    </div>
  </section>
</Layout>

<script>
  // all images inside the image modal content class
  const lightboxImages = document.querySelectorAll(".gallery-images");

  // dynamically selects all elements inside modal popup
  const modalElement = (element: string) =>
    document.querySelector(`.image-modal-popup ${element}`);

  const body = document.querySelector("body");

  // closes modal on clicking anywhere and adds overflow back
  document.addEventListener("click", () => {
    if (body) {
      body.style.overflow = "auto";
    }
    if (modalPopup) {
      (modalPopup as HTMLElement).style.display = "none";
    }
  });

  document.addEventListener("keydown", function (event) {
    if (event.key === "Escape") {
      const modal = document.querySelector(".image-modal-popup"); // Replace '.modal' with your modal's selector

      if (modal && (modal as HTMLElement).style.display !== "none") {
        (modal as HTMLElement).style.display = "none";
      }
    }
  });

  const modalPopup = document.querySelector(".image-modal-popup");

  // loops over each modal content img and adds click event functionality
  lightboxImages.forEach((img) => {
    const data = (img as HTMLImageElement).dataset;
    img.addEventListener("click", (e) => {
      if (body) {
        body.style.overflow = "hidden";
      }
      e.stopPropagation();
      if (modalPopup) {
        (modalPopup as HTMLElement).style.display = "block";
      }
      const linkElement = modalElement("a");
      if (linkElement) {
        (linkElement as HTMLAnchorElement).href = data.url || "#";
      }
      const modalImg = modalElement("img");
      if (modalImg) {
        (modalImg as HTMLImageElement).src = img.src;
      }
      const modalImgElement = modalElement("img");
      if (modalImgElement) {
        modalImgElement.classList.add("rounded-lg", "shadow-md");
      }
    });
  });
</script>
